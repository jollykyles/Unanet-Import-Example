<?xml version='1.0' encoding='utf-8'?>

<project name="UnanetImport" default="import" basedir=".">
   <description>Helps manage interfaces to a Unanet system</description>

   <!-- add antcontrib fuctionality -->
   <taskdef resource="net/sf/antcontrib/antlib.xml" />

   <tstamp>
      <format property="run.timestamp" pattern="yyyy-MM-dd_H-mm-ss" />
      <format property="todaysDate" pattern="MM/dd/yyyy" />
   </tstamp>

   <!-- Modify the file below before editing this build.xml file
        (most customizations should be handled there). -->
   <property file="imu_dynamic.properties"/>
   <property file="imu_config.properties"/>
   
   <!-- include other files -->  
   <import file="${basedir}/email-macro.xml"/>
	<import file="${basedir}/purge-files.xml"/>

   <condition property="purge-value-valid">
      <equals arg1="0" arg2="${purge.days}"/>
   </condition>

   <property name="temp.dir" value="${basedir}/temp" />
   <property name="data.dir" value="${basedir}/data" />
   <property name="run.dir" value="${data.dir}/${run.timestamp}" />
   <property name="import.jar.dir" value="${basedir}/bin" />
   <property name="run.log.dir" value="${run.dir}/logs" />
   <property name="run.input.dir" value="${run.dir}/input" />
   <property name="run.error.dir" value="${run.dir}/errors" />

   <mkdir dir="${temp.dir}" />
   <delete includeemptydirs="true">
      <fileset dir="${temp.dir}" includes="**/*"/>
   </delete>

   <target name="env">
      <echo>basedir: ${basedir}</echo>
      <echo>ant.file: ${ant.file}</echo>
   </target>

   <!-- The pre-processing step will always run but by default it
        does nothing.  If you have a pre-processing step, modify
        the imu_pre_build.xml file to execute whatever processes
        you need to.  Pre-processing may include kicking off
        an Impromptu report or any other process to automatically
        create your import CSV files. -->
   <target name="-pre-processing"
           description="Custom processing before running imports"
           depends="-init">
     <trycatch property="pre-errors">
       <try>
         <ant antfile="imu_pre_build.xml" />
       </try>
       <catch>
         <echo>${pre-errors}</echo>
         <property name="run.has.error" value="true" />
         <echo>Errors detected! Copying files to the errors directory...</echo>
         <mkdir dir="${run.dir}/errors" />
         <copy file="${run.log.dir}/${pre-processing.output.log}"
               todir="${run.error.dir}" />
         <copy file="${run.log.dir}/${pre-processing.error.log}"
               todir="${run.error.dir}" />
       </catch>
     </trycatch>
   </target>

   <target name="-header">
      <echo>Unanet IMU (import) version @VERSION@</echo>
      <echo>Compiled on @TIMESTAMP@</echo>
   </target>

   <!-- This target is called prior to any other and verifies many properties -->
   <target name="-init" depends="-header,-validate-import,-validate-access,-validate-version,-credentials-check">

      <!-- Created data directories -->
      <mkdir dir="${data.dir}" />
      <mkdir dir="${run.dir}" />
      <mkdir dir="${run.log.dir}" />
      <mkdir dir="${run.input.dir}" />
      <record name="${run.log.dir}/run.log" emacsmode="true" action="start" />
      <echo>Import Beginning...</echo>
      <echo>All files related to this run will be in ${run.dir}.</echo>

   </target>

   <target name="-validate-import">

      <!-- Verify the Import.jar is present -->
      <echo>Validating Import.jar...</echo>
      <condition property="import-jar-check">
        <available file="${import.jar.dir}/Import.jar" type="file"/>
      </condition>
      <fail unless="import-jar-check">Error!
         Cannot find the Import.jar file.
         Please make sure the import.jar.dir property is set correctly in the unanet-import-config file!
      </fail>
      <echo>Import.jar found!</echo>
   </target>

   <target name="-validate-access">

      <!-- Verify we can get to a Unanet system -->
      <echo>Validating Access to Unanet system...</echo>
      <condition property="unanet-access-check">
        <http url="${unanet.url}"/>
      </condition>
      <fail unless="unanet-access-check">Error!
         Cannot access your Unanet system.
         Please make sure the unanet.url property is set correctly in the unanet-import-config file!
      </fail>
      <echo>Access to Unanet verified!</echo>
   </target>

   <target name="-validate-version">

      <!-- Verify we can get to a Unanet system -->
      <echo>Validating Access to Unanet system...</echo>
	<echo>Running the Unanet command line import...</echo>
	<java dir="${import.jar.dir}"
	      jar="${import.jar.dir}/Import.jar"
	      fork="true"
	      failonerror="false"
	      resultproperty="import.versioncheck.result"
	      outputproperty="version-check.output"
	      errorproperty="version-check.error"
	      maxmemory="128m">
	    <jvmarg value="-Dlog4j2.formatMsgNoLookups=true"/>
	    <arg value="--url"/><arg value="${unanet.url}"/>
	    <arg value="--username"/><arg value="${username}"/>
	    <arg value="--password"/><arg value="${password}"/>
	    <arg value="--checkVersion"/>
	    <classpath>
	        <pathelement location="${import.jar.dir}/Import.jar"/>
	        <pathelement path="${java.class.path}"/>
	    </classpath>
	</java>
	<echo>Version Check Return Code: ${import.versioncheck.result}</echo>
	<echo>Version Check Output: ${version-check.output}</echo>
	<echo>Version Check Error: ${version-check.error}</echo>
	
	<!-- Capture the timestamped directory -->
	<property name="timestamped.dir" value="${run.dir}/${run.timestamp}"/>
	
	<!-- Check if the log file exists -->
	<if>
	    <available file="${timestamped.dir}/logs/import.log" type="file"/>
	    <then>
	        <echo>Import Output:</echo>
	        <exec executable="cmd" failonerror="false">
	            <arg value="/c"/>
	            <arg value="type"/>
	            <arg value="${timestamped.dir}/logs/import.log"/>
	        </exec>
	    </then>
	    <else>
	        <echo>Log file does not exist: ${timestamped.dir}/logs/import.log</echo>
	    </else>
	</if>      
<!-- parse the output looking for warnings or errors -->
      <echo>Searching for Errors...</echo>
      <condition property="version-error-check">
        <or>
          <contains string="${version-check.output}" substring="Incompatible Jar Version." casesensitive="true"/>
        </or>
      </condition>
      <if><equals arg1="${version-error-check}" arg2="true" />
      <then>
         <echo>Version Error detected! Copying files to the errors directory...</echo>
         <send-mail subject="Unanet IMU (import) encountered a version compatibility error!">
            <![CDATA[
            <p>${version-check.output}
            ]]>
            <attachments>
               <fileset dir="${temp.dir}" />
            </attachments>
         </send-mail>
         <fail>Version Check Error</fail>
      </then>
      </if>
   </target>
   
   <target name="-credentials-check">
	<!-- Verify we can get to a Unanet system -->
		<echo>Validating Access to Unanet system...</echo>
		<echo>Running the Unanet command line import...</echo>
		<java dir="${import.jar.dir}"
			jar="${import.jar.dir}/Export.jar"
			fork="true"
			failonerror="false"
			resultproperty="import.credentialscheck.result"
			outputproperty="credentials-check.output"
			maxmemory="128m">
				<arg value="--url"/><arg value="${unanet.url}"/>
				<arg value="--username"/><arg value="${username}"/>
				<arg value="--password"/><arg value="${password}"/>
				<arg value="--template"/><arg value="bogus"/>
				<classpath>
					<pathelement location="${import.jar.dir}/Export.jar"/>
					<pathelement path="${java.class.path}"/>
				</classpath>
		</java>
		

		<!-- parse the output looking for warnings or errors -->
		<echo>Searching for Errors...</echo>
		<condition property="credentials-error-check">
			<or>
				<contains string="${credentials-check.output}" substring="Invalid username or password," casesensitive="true"/>
			</or>
		</condition>
		<if><equals arg1="${credentials-error-check}" arg2="true" />
		<then>
			<echo>output: ${credentials-check.output}</echo>
			<echo>Credentials Error detected! Copying files to the errors directory...</echo>
<!-- 			<send-mail subject="Unanet IMU (import) encountered a credentials error!">
<![CDATA[
<p>${version-check.output}
]]>
				<attachments>
					<fileset dir="${temp.dir}" />
				</attachments>
			</send-mail> -->
			<fail>Credentials Check Error</fail>
		</then>
		</if>
	</target>

   <target name="import"
           description="Initiates all imports defined in the run.imports property"
           depends="-init,purge,-pre-processing"
           if="run.imports">

      <!-- loop through all of the specified imports -->
      <if><not><isset property="run.has.error" /></not>
      <then>
      <for list="${run.imports}" param="import" keepgoing="true" trim="true">
	    <sequential>
	        <trycatch property="errors">
	            <try>
	                <echo>Executing the @{import} import...</echo>
	
	                <echo>Validating input file (${run.input.dir}/${@{import}.input.file})...</echo>	
	                <!-- Verify the import is active -->
	                <if><isset property="@{import}.input.file" />
	                <else>
	                    <fail>Input file property (@{import}.input.file) is not defined.</fail>
	                </else>
	                </if>
	
	                <!-- Verify the input file is present -->
	                <if>
	                    <and>
	                        <available file="${run.input.dir}/${@{import}.input.file}" type="file"/>
	                        <length file="${run.input.dir}/${@{import}.input.file}" when="greater" length="0"/>
	                    </and>
	                <then>
	                    <echo>Input file has data.</echo>
	                    <!-- Run the command-line import -->
	                    <echo>Running the Unanet command line import...</echo>
	                    <java dir="${import.jar.dir}"
	                          jar="${import.jar.dir}/Import.jar"
	                          fork="true"
	                          failonerror="false"
	                          resultproperty="import.result"
	                          output="${run.log.dir}/${@{import}.log.file}"
	                          outputproperty="import.output"
	                          maxmemory="128m">
	                             <arg value="--url"/><arg value="${unanet.url}"/>
	                             <arg value="--username"/><arg value="${username}"/>
	                             <arg value="--password"/><arg value="${password}"/>
	                             <arg value="--import"/><arg value="@{import}"/>
	                             <arg value="--file"/><arg value="${run.input.dir}/${@{import}.input.file}"/>
	                             <arg line="${global-args}"/>
	                             <arg line="${@{import}-args}"/>
	                             <arg line="${@{import}.args}"/>
	                             <classpath>
	                                <pathelement location="${import.jar.dir}/Import.jar"/>
	                                <pathelement path="${java.class.path}"/>
	                             </classpath>
	                    </java>
	                    <echo>Import Return Code: ${import.result}</echo>
			    <echo>Import Output: ${import.output}</echo>
	
	                    <!-- parse the output looking for warnings or errors -->
	                    <condition property="input-error-check">
	                        <or>
	                            <contains string="${import.output}" substring="ERROR:" casesensitive="true"/>
	                            <contains string="${import.output}" substring="FATAL:" casesensitive="true"/>
	                            <contains string="${import.output}" substring="Incompatible Jar Version." casesensitive="true"/>
	                            <contains string="${import.output}" substring="Incompatible Servlet Version." casesensitive="true"/>
	                            <contains string="${import.result}" substring="2" casesensitive="true"/>
	                        </or>
	                    </condition>
	                    <if>
	                        <equals arg1="${input-error-check}" arg2="true" />
	                        <then>
	                            <property name="run.has.error" value="true" />
	                            <echo>Errors detected! Copying files to the errors directory...</echo>
	                            <mkdir dir="${run.dir}/errors" />
	                            <copy file="${run.log.dir}/${@{import}.log.file}"
	                                  todir="${run.error.dir}" />
	                        </then>
	                        <else>
	                            <echo>No errors detected.</echo>
	                        </else>
	                    </if>
	                </then>
	                <else>
	                    <if>
	                        <equals arg1="@{import}.skip-file-check-warning" arg2="false" />
	                        <then>
	                            <fail>Error! The specified input file (${run.input.dir}/${@{import}.input.file}) missing or empty.</fail>
	                        </then>
	                        <else>
	                            <echo>${run.input.dir}/${@{import}.input.file} is missing or empty - skipping this import.</echo>
	                        </else>
	                    </if>
	                </else>
	                </if>
	
	            </try>
	            <catch>
	                <echo>${errors}</echo>
	                <property name="run.has.error" value="true" />
	                <mkdir dir="${run.dir}/errors" />
	            </catch>
	            <finally>
	                <var name="input-file-check" unset="true" />
	                <var name="input-error-check" unset="true" />
	                <var name="input-data-check" unset="true" />
	                <var name="import.output" unset="true" />
	                <var name="import.result" unset="true" />
	                <echo>@{import} processing complete.</echo>
	                <echo/>
	                <echo/>
	            </finally>
	        </trycatch>
	    </sequential>
	</for>
      </then>
      </if>
      <record name="${run.log.dir}/run.log" action="stop" />

<!--       email files if any errors occured -->
      <if><isset property="run.has.error" />
      <then>
         <copy file="${run.log.dir}/run.log"
               todir="${run.error.dir}" />
         <send-mail subject="The Unanet IMU (import) had one or more errors!">
            <![CDATA[
            <p>The Unanet IMU (import) has encountered one or more errors.
            <p>The following list of files is attached to this email:
            <ul>
              <li>run.log - the mail log of the complete run</li>
              <li>each output file from import(s) that encountered an error</li>
            </ul>
            ]]>
            <attachments>
               <fileset dir="${run.error.dir}" />
            </attachments>
         </send-mail>
      </then>
      <else>
         <if><equals arg1="${positive.reporting}" arg2="true" />
         <then>
            <copy file="${run.log.dir}/run.log"
                  todir="${run.error.dir}" />
            <send-mail subject="The Unanet IMU (import) has successfully completed">
               <![CDATA[
                  <p>The Unanet IMU (import) has successfully completed.
                  <p>The run.log is attached to this email.
               ]]>
               <attachments>
                  <fileset dir="${run.log.dir}">
                     <filename name="run.log"/>
                  </fileset>
               </attachments>
            </send-mail>
         </then>
      </if>
      </else>
      </if>
   </target>

   <!-- This target sends a test email -->
   <target name="-test-email" description="Sends a test email to verify email functionality">
      <send-mail subject="Unanet command line import test email">
         <![CDATA[<p>If you receive this email, your command line import utility is
                    correctly set up for emailing error notifications.]]>
         <attachments/>
      </send-mail>
   </target>

   <target name="test" depends="-header,-validate-import,-validate-access,-validate-version,-credentials-check,-test-email">
      <echo>Unanet IMU (import) Test Complete.</echo>
   </target>
</project>
